generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  totpSecret  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  papers      Paper[]
  sessions    Session[]
  viewRecords ViewRecord[]
}

model Session {
  id          String    @id @default(cuid())
  userId      String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
}

model Paper {
  id          String    @id @default(cuid())
  userId      String
  slug        String    @unique
  title       String
  abstract    String
  content     String?   @db.Text
  tags        String[]
  published   Boolean   @default(false)
  canonicalPublishedVersionId String? @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  revisions   PaperRevision[]
  publishedVersions PublishedVersion[]
  canonicalPublishedVersion PublishedVersion? @relation("CanonicalVersion", fields: [canonicalPublishedVersionId], references: [id], onDelete: SetNull)
  viewRecords ViewRecord[]
  
  @@index([userId])
  @@index([slug])
  @@index([published])
  @@index([tags])
}

model PaperRevision {
  id          String    @id @default(cuid())
  paperId     String
  title       String
  abstract    String
  content     String?   @db.Text
  tags        String[]
  message     String?   // Optional revision message
  createdAt   DateTime  @default(now())
  
  paper       Paper     @relation(fields: [paperId], references: [id], onDelete: Cascade)
  publishedVersions PublishedVersion[]
  
  @@index([paperId])
  @@index([createdAt])
}

model PublishedVersion {
  id          String    @id @default(cuid())
  paperId     String
  revisionId  String?   // NULL if published from current version
  slug        String    @unique // Unique URL for this published version
  title       String
  abstract    String
  content     String?   @db.Text
  tags        String[]
  replacedById String?  // ID of the version that replaced this one
  publishedAt DateTime  @default(now())
  
  paper       Paper     @relation(fields: [paperId], references: [id], onDelete: Cascade)
  revision    PaperRevision? @relation(fields: [revisionId], references: [id], onDelete: SetNull)
  replacedBy  PublishedVersion? @relation("VersionReplacement", fields: [replacedById], references: [id], onDelete: SetNull)
  replacements PublishedVersion[] @relation("VersionReplacement")
  canonicalPaper Paper? @relation("CanonicalVersion")
  
  @@index([paperId])
  @@index([slug])
  @@index([publishedAt])
  @@index([replacedById])
}

model ViewRecord {
  id          String    @id @default(cuid())
  paperId     String
  userId      String?   // Optional - track logged in users
  ipAddress   String?   // Optional - anonymized IP for unique visitor tracking
  userAgent   String?   // Optional - browser/device info
  referrer    String?   // Optional - where the view came from
  viewedAt    DateTime  @default(now())
  
  paper       Paper     @relation(fields: [paperId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([paperId])
  @@index([viewedAt])
  @@index([userId])
  @@index([paperId, viewedAt])
}